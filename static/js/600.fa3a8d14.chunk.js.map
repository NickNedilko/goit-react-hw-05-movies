{"version":3,"file":"static/js/600.fa3a8d14.chunk.js","mappings":"kNACA,EAA2B,4BAA3B,EAAkE,4BAAlE,EAA2G,8BAA3G,EAAgJ,wB,SCI1IA,EAAY,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MAEjB,OADAC,QAAQC,IAAIJ,IAEV,eAAIK,UAAWC,EAAf,gBACGN,QADH,IACGA,OADH,EACGA,EAAQO,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,aAA3B,OAEX,eAAaN,UAAWC,EAAxB,UACE,UAAC,EAAAM,KAAD,CAAMP,UAAWC,EAAUO,GAAE,iBAAYL,GAAMM,MAAO,CAAEC,KAAMd,GAA9D,WACE,gBACEI,UAAWC,EACXU,IACkB,OAAhBN,EAAA,yCACsCA,GADtC,wDAIFO,IAAKR,KAEP,wBAAKA,KACL,0CAAkBE,SAZbH,EAFE,KAoBlB,EAEDT,EAAUmB,SAAW,CACnBlB,OAAQmB,IAAAA,QACNA,IAAAA,MAAgB,CACdX,GAAIW,IAAAA,OACJC,KAAMD,IAAAA,OACNV,MAAOU,IAAAA,OACPT,YAAaS,IAAAA,WAKnB,O,oHC1CA,GAAgB,UAAY,8BAA8B,WAAa,+BAA+B,iBAAmB,qCAAqC,gBAAkB,oCAAoC,mBAAmB,sC,SCgDvO,EA3CmB,SAAC,GAAkB,IAAhBE,EAAe,EAAfA,SACpB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAeA,OACC,gBAAKnB,UAAWC,EAAAA,UAAhB,UACE,kBAAMD,UAAWC,EAAAA,WAAgBe,SATjB,SAAAI,GAEf,GADFA,EAAEC,iBACe,KAAXH,EACJ,OAAOI,EAAAA,GAAAA,QAAc,yBACvBN,EAASE,EACV,EAIE,WACD,mBAAQK,KAAK,SAASvB,UAAWC,EAAAA,iBAAjC,UACE,iBAAMD,UAAWC,EAAAA,sBAAjB,UAA4C,SAAC,MAAD,SAI9C,kBACED,UAAWC,EAAAA,gBACXsB,KAAK,OACLR,KAAK,SACLS,MAAON,EACPO,SA1BiB,SAAAL,GACnB,IAAMM,EAASN,EAAEO,OAAOH,MAExBL,EAAUO,EACX,EAuBGE,aAAa,MACbC,WAAS,EACTC,YAAY,mCAKjB,E,iBCPD,EA9Be,WACb,OAAsCb,EAAAA,EAAAA,UAAS,IAA/C,eAAOc,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,mBAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMT,EAASQ,EAAaE,IAAI,WAEhCC,EAAAA,EAAAA,YAAU,WACO,OAAXX,IAGJY,EAAAA,EAAAA,IAAeZ,GAAQa,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcR,EAAeQ,EAAKC,QAAlC,IAA4CC,OAAM,SAACC,GAC7E7C,QAAQC,IAAI4C,EACb,GACF,GAAE,CAACjB,IASJ,OACE,6BACE,SAAC,EAAD,CAAYV,SATI,SAAAE,GAClB,GAAe,KAAXA,EACF,OAAOiB,EAAgB,CAAC,GAE1BA,EAAgB,CAAET,OAAQR,GAC3B,KAKG,SAACxB,EAAA,EAAD,CAAWC,OAAQoC,MAGxB,C","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieList/MovieList.module.css?6db5","components/MovieList/MovieList.jsx","webpack://goit-react-hw-05-movies/./src/components/SearchForm/SearchForm.module.css?d6f1","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"filmList\":\"MovieList_filmList__W3QeZ\",\"filmCard\":\"MovieList_filmCard__E6kgn\",\"filmPoster\":\"MovieList_filmPoster__RnSdS\",\"link\":\"MovieList_link__+cn-g\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport css from './MovieList.module.css';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  console.log(movies)\n  return (\n    <ul className={css.filmList}>\n      {movies?.map(({ id, title, poster_path, vote_average\n }) => (\n        <li key={id} className={css.filmCard}>\n          <Link className={css.link} to={`/movie/${id}`} state={{ from: location }}>\n            <img\n              className={css.filmPoster}\n              src={\n                poster_path !== null\n                  ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                  : `https://static.thenounproject.com/png/2712910-200.png`\n              }\n              alt={title}\n            />\n            <h2>{title}</h2>\n            <p>Average vote: {vote_average}</p>\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMovieList.propType = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      title: PropTypes.string,\n      poster_path: PropTypes.string,\n    })\n  ),\n};\n\nexport default MovieList;\n","// extracted by mini-css-extract-plugin\nexport default {\"Searchbar\":\"SearchForm_Searchbar__TfPCD\",\"SearchForm\":\"SearchForm_SearchForm__jbIQn\",\"SearchFormButton\":\"SearchForm_SearchFormButton__ROHLz\",\"SearchFormInput\":\"SearchForm_SearchFormInput__jntvc\",\"SearchForm-input\":\"SearchForm_SearchForm-input__v5K3g\"};","import React, { useState } from 'react';\nimport { toast} from 'react-toastify';\nimport PropTypes from 'prop-types';\nimport { BsSearch } from 'react-icons/bs';\nimport css from './SearchForm.module.css'\n\nconst SearchForm = ({ onSubmit }) => {\n  const [search, setSearch] = useState('');\n\n  const handleSearch = e => {\n    const querry = e.target.value;\n  \n    setSearch(querry);\n  };\n\n  const formSubmit = e => {\n    e.preventDefault();\n      if (search === '') {\n      return toast.warning('Enter some movie name')}\n    onSubmit(search);\n  };\n\n  return (\n   <div className={css.Searchbar}>\n     <form className={css.SearchForm} onSubmit={formSubmit}>\n    <button type=\"submit\" className={css.SearchFormButton}>\n      <span className={css.SearchFormButtonLabel}><BsSearch></BsSearch></span>\n    </button>\n  \n\n    <input\n      className={css.SearchFormInput}\n      type=\"text\"\n      name=\"search\"\n      value={search}\n      onChange={handleSearch}\n      autoComplete=\"off\"\n      autoFocus\n      placeholder=\"Search your favorite movie\"\n    />\n  </form>\n   </div>\n  );\n};\n\nSearchForm.propTypes = {\n onSubmit: PropTypes.func.isRequired,\n}\n\nexport default SearchForm;\n","import MovieList from 'components/MovieList/MovieList';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { apiSearchFilms } from 'services/ApiFilms';\n\nconst Movies = () => {\n  const [searchFilms, setSearchFilms] = useState([]);\n  const [querryParams, setQuerryParams] = useSearchParams();\n\n  const querry = querryParams.get('querry');\n\n  useEffect(() => {\n    if (querry === null) {\n      return;\n    }\n    apiSearchFilms(querry).then(({ data }) => setSearchFilms(data.results)).catch((error) => {\n      console.log(error)\n    });\n  }, [querry]);\n\n  const querryInput = search => {\n    if (search === '') {\n      return setQuerryParams({});\n    }\n    setQuerryParams({ querry: search });\n  };\n\n  return (\n    <main>\n      <SearchForm onSubmit={querryInput} />\n      <MovieList movies={searchFilms} />\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["MovieList","movies","location","useLocation","console","log","className","css","map","id","title","poster_path","vote_average","Link","to","state","from","src","alt","propType","PropTypes","name","onSubmit","useState","search","setSearch","e","preventDefault","toast","type","value","onChange","querry","target","autoComplete","autoFocus","placeholder","searchFilms","setSearchFilms","useSearchParams","querryParams","setQuerryParams","get","useEffect","apiSearchFilms","then","data","results","catch","error"],"sourceRoot":""}